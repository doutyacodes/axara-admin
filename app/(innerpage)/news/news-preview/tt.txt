"use client"

const ageOptions = Array.from({ length: 10 }, (_, i) => i + 3);

function AddNews() {
  const [selectedAge, setSelectedAge] = useState(3);
  const [categories, setCategories] = useState([]);
  const [errors, setErrors] = useState({});
  const [isSubmitting, setIsSubmitting] = useState(false);
  
  const [showImageDialog, setShowImageDialog] = useState(false);
  const [categoryLoading, setCategoryLoading] = useState(false);
  const [formStates, setFormStates] = useState({});
  // const { data } = useData();
  const data = datas
  const [base64Image, setBase64Image] = useState(data?.image || null);
  const [imageData, setImageData] = useState(null);
  const [fileName, setFileName] = useState(null)
  const isFirstRender = useRef(true);

  const router = useRouter();


const handleCategoryChange = (value) => {
  if (isFirstRender.current) {
    isFirstRender.current = false;
    return;
  }
  
  ageOptions.forEach(age => {
    updateFormState(age, 'category', value);
  });
};
  

  useEffect(() => {
    if (data) {
      const initialStates = {};
      const categoryId = data.originalData.categoryIds;      
  
      ageOptions.forEach(age => {
        const resultData = data.results.find(r => r.age === age) || {};
        initialStates[age] = {
          category: categoryId, // Ensure category is set consistently
          age: age,
          title: resultData.title || '',
          // summary: resultData.summary || '',
          description: resultData.description || '',
          showOnTop: data.originalData.showOnTop,
          main_news: data.originalData.main_news,
          questions: resultData.questions?.map((q, idx) => ({ 
            id: idx + 1, 
            question: q 
          })) || [{ id: 1, question: '' }],
          wordDefinitions: resultData.wordDefinitions?.map((wd, idx) => ({
            id: idx + 1,
            word: wd.word,
            definition: wd.definition
          })) || [{ id: 1, word: '', definition: '' }],
        };
      });
      setFormStates(initialStates);
      setImageData(data.image);
  
    }
  }, [data]);
  console.log("formStates:", formStates);

  useEffect(()=>{
    const category = formStates[selectedAge]?.category
    const title = formStates[selectedAge]?.title
    if(category && title){
      const fileName = `${Date.now()}-${category}-${title.replace(/\s+/g, '-')}.png`;
      setFileName(fileName)
    }
  },[formStates])

  const getNewsCategories = async () => {
    setCategoryLoading(true);
    try {
      const token = typeof window !== "undefined" ? localStorage.getItem("token") : null;
      if (!token) {
        setCategoryLoading(false);
        return;
      }
      const response = await GlobalApi.GetNewsCategories(token);
      if (response.status === 200) {
        const fetchedCategories = response.data.categories;
        setCategories(fetchedCategories);
        
      }
    } catch (err) {
      console.log(err);
    } finally {
      setCategoryLoading(false);
    }
  };

  console.log("categories", categories)

  useEffect(() => {
    // if(selectedAge){
      getNewsCategories();
    // }
  }, [data]);

  const updateFormState = (age, field, value) => {
    setFormStates(prev => ({
      ...prev,
      [age]: {
        ...prev[age],
        [field]: value
      }
    }));
  };



  const handleCategoryToggle = (categoryId) => {
    setNewsForm(prev => {
      const currentCategories = prev.categories;
      const isSelected = currentCategories.includes(categoryId);
      
      // If already selected, remove. If not, add.
      const updatedCategories = isSelected 
        ? currentCategories.filter(id => id !== categoryId)
        : [...currentCategories, categoryId];
      
      return {
        ...prev,
        categories: updatedCategories
      };
    });
  };


  return (
    <>

      {
        (
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">

          {/* Main Form */}
          <Card className="border-none shadow-lg w-full max-w-full mx-auto px-2 md:px-6">
            <CardContent>
              <form onSubmit={handleSubmit} className="space-y-4 md:space-y-6">
                {/* Error Alert */}
                {errors.submit && (
                  <Alert variant="destructive">
                    <AlertDescription>{errors.submit}</AlertDescription>
                  </Alert>
                )}

                {/* Categories Multi-Select */}
              <div className="space-y-2">
                <Label>Categories*</Label>
                <div className="border rounded-lg p-4">
                  {/* <div className="mb-2">
                    <Input
                      placeholder="Search categories..."
                      value={categorySearchTerm}
                      onChange={(e) => setCategorySearchTerm(e.target.value)}
                      className="border-gray-200"
                    />
                  </div> */}
                  
                  {categoryLoading ? (
                    <div className="flex justify-center">
                      <Loader2 className="animate-spin" />
                    </div>
                  ) : (
                    <div className="grid grid-cols-2 md:grid-cols-3 gap-2">
                      {categories.map(cat => (
                        <div 
                          key={cat.id} 
                          className={`
                            flex items-center space-x-2 p-2 border rounded-lg cursor-pointer 
                            ${formStates.category.includes(cat.id) 
                              ? 'bg-orange-100 border-orange-500' 
                              : 'hover:bg-gray-100'}
                          `}
                          onClick={() => handleCategoryToggle(cat.id)}
                        >
                          {formStates.category.includes(cat.id) && (
                            <Check className="h-5 w-5 text-orange-500" />
                          )}
                          <span>{cat.name}</span>
                        </div>
                      ))}
                    </div>
                  )}
                </div>
                {errors.categories && <p className="text-sm text-red-500">{errors.categories}</p>}
              </div>

              



                <Button 
                  type="submit" 
                  disabled={isSubmitting}
                  className="w-full bg-orange-500 hover:bg-orange-600"
                >
                  {isSubmitting ? (
                    <>
                      <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                      Updating...
                    </>
                  ) : (
                    'Update Article'
                  )}
                </Button>
              </form>
            </CardCo